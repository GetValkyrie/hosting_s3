<?php
/**
 * @file
 * Install, update and uninstall for the hosting s3 module.
 */

/**
 * Implementation of hook_schema().
 */
function hosting_s3_schema() {
  $schema['hosting_s3_sites'] = array(
    'fields' => array(
      'vid' => array(
        'description' => 'Site revision ID.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Site node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      's3_access_key_id' => array(
        'description' => 'AWS credentials key ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      's3_secret_access_key' => array(
        'description' => 'AWS credentials secret key.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      's3_bucket_name' => array(
        'description' => 'S3 bucket to store site files.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      's3_backup_bucket_name' => array(
        'description' => 'S3 bucket to store site backups.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      )
    ),
    'indexes' => array(
      'vid' => array('vid'),
    ),
  );

  $schema['hosting_s3_backups'] = array(
    'fields' => array(
      'bid' => array(
        'description' => 'Backup ID.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'bucket' => array(
        'description' => 'S3 bucket to store backups.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'folder' => array(
        'description' => 'Folder in S3 bucket to store a backup.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'bid' => array('bid'),
    ),
  );

  return $schema;
}

/**
 * Add field descriptions, remove defaults, and ensure fields are not null.
 */
function hosting_s3_update_7100() {
  db_change_field('hosting_s3_sites', 'vid', 'vid',
    array(
      'description' => 'Site revision ID.',
      'type' => 'int',
      'not null' => TRUE,
    )
  );
  db_change_field('hosting_s3_sites', 'nid', 'nid',
    array(
      'description' => 'Site node ID',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
    )
  );
  db_change_field('hosting_s3_sites', 's3_access_key_id', 's3_access_key_id',
    array(
      'description' => 'AWS credentials key ID.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    )
  );
  db_change_field('hosting_s3_sites', 's3_secret_access_key', 's3_secret_access_key',
    array(
      'description' => 'AWS credentials secret key.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    )
  );
  db_change_field('hosting_s3_sites', 's3_bucket_name', 's3_bucket_name',
    array(
      'description' => 'S3 bucket to store site files.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    )
  );
  db_change_field('hosting_s3_backups', 'bid', 'bid',
    array(
      'description' => 'Backup ID.',
      'type' => 'int',
      'not null' => TRUE,
    )
  );
  db_change_field('hosting_s3_backups', 'bucket', 'bucket',
    array(
      'description' => 'S3 bucket to store backups.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE
    )
  );
}

/**
 * Add a field to track backup folders.
 */
function hosting_s3_update_7101() {
  db_add_field('hosting_s3_sites', 's3_backup_bucket_name',
    array(
      'description' => 'S3 bucket to store site backups.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    )
  );
  db_add_field('hosting_s3_backups', 'folder',
    array(
      'description' => 'Folder in S3 bucket to store a backup.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    )
  );
}
