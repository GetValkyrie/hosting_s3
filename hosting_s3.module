<?php
/**
 * @file
 * Provision and manage S3 buckets for hosted Drupal sites.
 */

require_once dirname(__FILE__) . '/includes/s3_common.inc';

/**
 * Implements hook_form_alter().
 */
function hosting_s3_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'site_node_form') {
    $new_site = (bool) is_null($form['nid']['#value']);
    $read_only = !$new_site;

    if (!$new_site) {
      $form['info']['S3 bucket_name'] = array(
        '#type' => 'item',
        '#disabled' => TRUE,
        '#title' => t('S3 bucket name'),
        '#markup' => !empty($form['#node']->s3_bucket_name) ? $form['#node']->s3_bucket_name : 'none',
      );
    }
    $form['s3'] = array(
      '#type' => 'fieldset',
      '#title' => t('S3 credentials'),
      '#description' => t('Credentials for access to create and manage an S3 bucket for this site.'),
    );
    $form['s3']['s3_access_key_id'] = array(
      '#type' => 'textfield',
      '#disabled' => $read_only,
      '#title' => t('Access key ID'),
      '#attributes' => array('autocomplete' => 'off'),
      '#default_value' => isset($form['#node']->s3_access_key_id) ? $form['#node']->s3_access_key_id : '',
    );
    $form['s3']['s3_secret_access_key'] = array(
      '#type' => 'password',
      '#disabled' => $read_only,
      '#title' => t('Secret access key'),
      '#attributes' => array('autocomplete' => 'off'),
      '#default_value' => isset($form['#node']->s3_secret_access_key) ? $form['#node']->s3_secret_access_key : '',
    );

    $form['#validate'][] = 'hosting_s3_validate_credentials';

    return $form;
  }
}

/**
 * Validation callback to ensure S3 credentials are valid.
 *
 * See: hosting_s3_form_alter().
 */
function hosting_s3_validate_credentials($form, &$form_state) {
  // Both credential fields must be filled to proceed.
  $access_key_id = $form_state['values']['s3_access_key_id'];
  $secret_access_key = $form_state['values']['s3_secret_access_key'];

  if (empty($access_key_id) && empty($secret_access_key)) {
    return;  // No credentials supplied, nothing more to do here.
  }
  elseif (aegir_s3_credentials_exist($access_key_id, $secret_access_key, 'hosting_s3_handle_missing_keys')) {
    $client = aegir_s3_client_factory($access_key_id, $secret_access_key);
    return aegir_s3_validate_credentials($client, 'hosting_s3_handle_validation', 'hosting_s3_handle_exception');
  }
  else {  // Missing key.
    return FALSE;
  }
}

function hosting_s3_handle_missing_keys($missing_keys) {
  foreach ($missing_keys as $key => $label) {
    form_set_error($key, "Both S3 credentials are required. `$label` is blank.");
  }
}

/**
 * Helper function to display a success message after validating S3 credentials.
 */
function hosting_s3_handle_validation() {
  drupal_set_message(t('S3 credentials validated.'));
  return TRUE;
}

/**
 * Helper function to display errors from AWS.
 */
function hosting_s3_handle_exception($exception) {
  $code = $exception->getExceptionCode();
  $message= $exception->getMessage();
  $error = array();
  $error[] = t('There was an error validating your S3 credentials.');
  $error[] = t('Error code: @code', array('@code' => $code));
  $error[] = t('Error message: @message', array('@message' => $message));
  form_set_error('s3', implode('</li><li>', $error));
  return FALSE;
}

/**
 * Implements hook_node_insert().
 */
function hosting_s3_node_insert($node) {
  if ($node->type == 'site') {
    $id = db_insert('hosting_s3_sites')->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      's3_access_key_id' => isset($node->s3_access_key_id) ? $node->s3_access_key_id : '',
      's3_secret_access_key' => isset($node->s3_secret_access_key) ? $node->s3_secret_access_key : '',
      's3_bucket_name' => isset($node->s3_bucket_name) ? $node->s3_bucket_name : '',
    ))
    ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function hosting_s3_node_update($node) {
  if (FALSE === db_query("SELECT s3_access_key_id FROM {hosting_s3_sites} WHERE vid = :vid", array(':vid' => $node->vid))->fetchField()) {
    hosting_s3_node_insert($node);
  }
  else {
    db_update('hosting_s3_sites')
      ->fields(array(
        's3_access_key_id' => $node->s3_access_key_id,
        's3_secret_access_key' => $node->s3_secret_access_key,
        's3_bucket_name' => $node->s3_bucket_name,
      ))
      ->condition('vid', $node->vid)
      ->execute();
  }
}

/**
 * Implements hook_node_view().
 */
function hosting_s3_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'site') {
    $node->content['info']['s3_bucket_name'] = array(
      '#type' => 'item',
      '#disabled' => TRUE,
      '#title' => t('S3 bucket name'),
      '#markup' => !empty($node->s3_bucket_name) ? $node->s3_bucket_name : 'none',
    );
  }
}

/**
 * Implements hook_node_load().
 */
function hosting_s3_node_load($nodes, $types) {
  foreach ($nodes as $nid => &$node) {
    if ($node->type == 'site') {
      $fields = db_query("SELECT s3_access_key_id, s3_secret_access_key, s3_bucket_name FROM {hosting_s3_sites} WHERE vid = :vid", array(':vid' => $node->vid))->fetchAssoc();
      if (!empty($fields)) {
        foreach ($fields as $key => $value) {
          $nodes[$nid]->$key = $value;
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function hosting_s3_node_delete($node) {
  db_delete('hosting_s3_sites')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_revision_revision().
 */
function hosting_s3_node_revision_delete($node) {
  db_delete('hosting_s3_sites')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Look up the most recent backup for a given site.
 */
function hosting_s3_get_latest_site_backup($nid) {
  return db_query("SELECT bid FROM {hosting_site_backups} WHERE site = :site ORDER BY timestamp DESC LIMIT 1", array(':site' => $nid))->fetchField();
}

/**
 * Save a backup bucket name.
 */
function hosting_s3_save_backup($bid, $bucket) {
  db_insert('hosting_s3_backups')->fields(array(
    'bid' => $bid,
    'bucket' => $bucket,
  ))->execute();
}

/**
 * Delete a backup bucket name.
 */
function hosting_s3_delete_backup($bid) {
  db_delete('hosting_s3_backups')
    ->condition('bid', $bid)
    ->execute();
}

/**
 * Look up a backup bucket name.
 */
function hosting_s3_load_backup($bid) {
  return db_query("SELECT bucket FROM {hosting_s3_backups} WHERE bid = :bid", array(':bid' => $bid))->fetchField();
}
