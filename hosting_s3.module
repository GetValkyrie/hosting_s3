<?php
/**
 * @file
 * Provision and manage S3 buckets for hosted Drupal sites.
 */

require dirname(__FILE__) . '/vendor/autoload.php';
use Aws\S3\S3Client;
use Aws\Common\Credentials\Credentials;

/**
 * Implements hook_form_alter().
 */
function hosting_s3_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'site_node_form') {

    $form['s3'] = array(
      '#type' => 'fieldset',
      '#title' => t('S3 credentials'),
      '#description' => t('Credentials for access to create and manage an S3 bucket for this site.'),
    );

# TODO: Add checkbox to inherit from client (default to on).

    $form['s3']['s3_access_key_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Access key ID'),
      '#default_value' => isset($form['#node']->s3_access_key_id) ? $form['#node']->s3_access_key_id : '',
    );

    $form['s3']['s3_secret_access_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Secret access key'),
      '#default_value' => isset($form['#node']->s3_secret_access_key) ? $form['#node']->s3_secret_access_key : '',
    );

    $form['#validate'][] = 'hosting_s3_validate_credentials';

    return $form;
  }
}

/**
 * Validation callback to ensure S3 credentials are valid.
 *
 * See: hosting_s3_form_alter().
 */
function hosting_s3_validate_credentials($form, &$form_state){
  // Both credential fields must be filled to proceed.
  $access_key_id = $form_state['values']['s3_access_key_id'];
  $secret_access_key = $form_state['values']['s3_secret_access_key'];

  if (empty($access_key_id) && empty($secret_access_key)) {
    // No credentials supplied, nothing more to do here.
    return;
  }
  elseif (!empty($access_key_id) && empty($secret_access_key)) {
    form_set_error('s3_secret_access_key', 'Both S3 credentials are required. `Secret access key` is blank.');
  }
  elseif (empty($access_key_id) && !empty($secret_access_key)) {
    form_set_error('s3_access_key_id', 'Both S3 credentials are required. `Access key ID` is blank.');
  }
  else {
    $credentials = new Credentials($access_key_id, $secret_access_key);

    // Instantiate an S3 client with our AWS credentials
    $client = S3Client::factory(array(
      'credentials' => $credentials
    ));

    try {
      // This only validates that the keys themselves are valid, and not that
      // they grant sufficient access to create/sync/delete buckets.
      $result = $client->listBuckets();
    } catch (Exception $e) {
      $code = $e->getExceptionCode();
      $message= $e->getMessage();
      $error = array();
      $error[] = t('There was an error validating your S3 credentials.');
      $error[] = t('Error code: @code', array('@code' => $code));
      $error[] = t('Error message: @message', array('@message' => $message));
      form_set_error('s3', implode('</li><li>', $error));
    }
    if (isset($result)) {
      drupal_set_message('S3 credentials validated.');
    }
  }

}

/**
 * Implements hook_node_insert().
 */
function hosting_s3_node_insert($node) {
  if ($node->type == 'site' && !empty($node->s3_access_key_id) && !empty($node->s3_secret_access_key)) {
    $id = db_insert('hosting_s3_sites')->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      's3_access_key_id' => $node->s3_access_key_id,
      's3_secret_access_key' => $node->s3_secret_access_key,
    ))
    ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function hosting_s3_node_update($node) {
  if (FALSE === db_query("SELECT s3_access_key_id FROM {hosting_s3_sites} WHERE vid = :vid", array(':vid' => $node->vid))->fetchField()) {
    hosting_s3_node_insert($node);
  }
  else {
    db_update('hosting_s3_sites')
      ->fields(array(
        's3_access_key_id' => $node->s3_access_key_id,
        's3_secret_access_key' => $node->s3_secret_access_key,
      ))
      ->condition('vid', $node->vid)
      ->execute();
  }
}

/**
 * Implements hook_node_load().
 */
function hosting_s3_node_load($nodes, $types) {
  foreach ($nodes as $nid => &$node) {
    if ($node->type == 'site') {
      // array instead
      $nodes[$nid]->s3_access_key_id = db_query("SELECT s3_access_key_id FROM {hosting_s3_sites} WHERE vid = :vid", array(':vid' => $node->vid))->fetchField();;
      $nodes[$nid]->s3_secret_access_key = db_query("SELECT s3_secret_access_key FROM {hosting_s3_sites} WHERE vid = :vid", array(':vid' => $node->vid))->fetchField();;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function hosting_s3_node_delete($node) {
  db_delete('hosting_s3_sites')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_revision_revision().
 */
function hosting_s3_node_revision_delete($node) {
  db_delete('hosting_s3_sites')
    ->condition('vid', $node->vid)
    ->execute();
}
